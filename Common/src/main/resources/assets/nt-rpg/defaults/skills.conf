Skills: [
  {
    #This skill is equivalent of a javaskill cz.neumimto.skills.active.SkillMegabolt.
    # Id must be unique
    Id: "ntrpg:megabolt2"
    SuperType: "Active"

    # Skill types
    Skill-Types: [
      "ntrpg:aoe",
      "ntrpg:lightning"
      "ntrpg:elemental"
    ]

    # If the skill may deal damage there must be node DamageType.
    # If the skill deals no damage to anyone (eg simple healing) this node should not be defined
    Damage-Type: "MAGIC"
    Handler: "nts"

    Script: """
        # read skill settings configuration values
        # $settings.X is a "shortcut" for config_value{ctx=@context, key="X"}
        @damage = $settings.damage
        @radius = $settings.radius

        @nearby_entities = find_nearby_entities{radius=@radius, entity=@caster}

        FOREACH @entity in @nearby_entities

            #With SuperType Active we can use reference @caster in our script
            IF damage{damager=@caster, target=@entity, damage=@damage}
               lightning{at_entity=@entity}
            END
        END

        RETURN SkillResult.OK
    """
  }
  {
    Id: "id:vitalize"
    Skill-Types: [
      "ntrpg:healing"
    ]
    Handler: "ntrpg:periodic_regeneration"
  }
  {
    # AOE Stun and damage
    Id: "ntrpg:wrestle"
    SuperType: "Active"
    Handler: "nts"
    Skill-Types: [
      "ntrpg:aoe",
      "ntrpg:physical"
    ]
    Damage-Type: PHYSICAL
    Script: """
        @duration = $settings.duration
        @damage = $settings.damage
        @radius = $settings.radius

        @nearby_entities = find_nearby_entities{radius=@radius, e=@caster}

        FOREACH @entity in @nearby_entities
            IF damage{damager=@caster, target=@entity, damage=@damage}
                @effect = StunEffect{target=@entity, duration=@duration}
                add_effect{effect=@effect, es=@caster, source=@this_skill}
            END
        END

        RETURN SkillResult.OK
    """
  }
  {
    Id: "ntrpg:iceshot"
    SuperType: "Active"
    Skill-Types: [

    ]
    Damage-Type: MAGIC
    Handler: "ntrpg:iceshot"
  }
    {
      Id: "ntrpg:magicalmissile"
      SuperType: "Active"
      Skill-Types: [
        "ntrpg:projectile"

      ]
      Damage-Type: MAGIC
      Handler: "ntrpg:iceshot"
    }
  {
    Id: "ntrpg:lightningstrike"
    Handler: "nts"
    SuperType: "Targeted"
    Skill-Types: [
        "ntrpg:elemental"
        "ntrpg:lightning"
        "ntrpg:damage_check_target"
    ]
    Damage-Type: LIGHTNING
    Script: """
        # Read skill settings configuration values
        # $settings.X is a "shortcut" for config_value{ctx=@context, key="X"}
        @damage = $settings.damage

        # With SuperType Targeted we can use reference @caster and @target in our script
        IF damage{damager=@caster, target=@target, damage=@damage, k=F, s=@this_skill}
            lightning{at_entity=@target}
        END
        RETURN SkillResult.OK
    """
  }
  {
    Id: "ntrpg:kick"
    Handler: "nts"
    SuperType: "Targeted"
    Skill-Types: [
        "ntrpg:physical"
    ]
    Damage-Type: CONTACT
    Script: """
        @damage = $settings.damage

        # With SuperType Targeted we can use reference @caster and @target in our script
        IF damage{damager=@caster, target=@target, damage=@damage, k=F, s=@this_skill}
        #    set_velocity{}
            particle{e=@target, a=2, p=Particle.EXPLOSION_NORMAL}
        END
        RETURN SkillResult.OK
    """
  }
  {
    Id: "ntrpg:web"
    Handler: "nts"
    SuperType: "Targeted"
    Skill-Types: [
        "ntrpg:summon"
        "ntrpg:damage_check_target"
    ]
    Damage-Type: CONTACT
    Script: """
        @duration = $settings.duration

        @effect = WebEffect{e=@target,d=@duration}

        RETURN SkillResult.OK
    """
  }
    {
      Id: "ntrpg:swapposition"
      Handler: "nts"
      SuperType: "Targeted"
      Skill-Types: [
          "ntrpg:movement"
          "ntrpg:damage_check_target"
      ]
      Damage-Type: CONTACT
      Script: """
          @duration = $settings.duration

          @targetLoc = get_location{e=@target}
          @sourceLoc = get_location{e=@caster}

          particle{l=@targetLoc, p=Particle.PORTAL, a=20, ox=5, oy=3, oz=5}
          particle{l=@sourceLoc, p=Particle.PORTAL, a=20, ox=5, oy=3, oz=5}

          teleport{e=@target, l=@sourceLoc}
          teleport{e=@caster, l=@targetLoc}

          RETURN SkillResult.OK
      """
    }
]